// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book_genre.sql

package db

import (
	"context"
)

const createBookGenre = `-- name: CreateBookGenre :one
INSERT INTO book_genres (book_id, genre_name)
VALUES ($1, $2) RETURNING book_id, genre_name
`

type CreateBookGenreParams struct {
	BookID    int64  `json:"book_id"`
	GenreName string `json:"genre_name"`
}

func (q *Queries) CreateBookGenre(ctx context.Context, arg CreateBookGenreParams) (BookGenre, error) {
	row := q.db.QueryRowContext(ctx, createBookGenre, arg.BookID, arg.GenreName)
	var i BookGenre
	err := row.Scan(&i.BookID, &i.GenreName)
	return i, err
}

const deleteGenreForBook = `-- name: DeleteGenreForBook :exec
DELETE
FROM book_genres
WHERE book_id = $1
  AND genre_name = $2
`

type DeleteGenreForBookParams struct {
	BookID    int64  `json:"book_id"`
	GenreName string `json:"genre_name"`
}

func (q *Queries) DeleteGenreForBook(ctx context.Context, arg DeleteGenreForBookParams) error {
	_, err := q.db.ExecContext(ctx, deleteGenreForBook, arg.BookID, arg.GenreName)
	return err
}

const getBooksByGenreName = `-- name: GetBooksByGenreName :many
SELECT book_id
FROM book_genres
WHERE genre_name = $1
ORDER BY book_id LIMIT $2
OFFSET $3
`

type GetBooksByGenreNameParams struct {
	GenreName string `json:"genre_name"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) GetBooksByGenreName(ctx context.Context, arg GetBooksByGenreNameParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByGenreName, arg.GenreName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var book_id int64
		if err := rows.Scan(&book_id); err != nil {
			return nil, err
		}
		items = append(items, book_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenresByBookID = `-- name: GetGenresByBookID :many
SELECT genre_name
FROM book_genres
WHERE book_id = $1
`

func (q *Queries) GetGenresByBookID(ctx context.Context, bookID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGenresByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var genre_name string
		if err := rows.Scan(&genre_name); err != nil {
			return nil, err
		}
		items = append(items, genre_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
