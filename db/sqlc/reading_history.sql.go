// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reading_history.sql

package db

import (
	"context"
	"database/sql"
)

const createReadingHistory = `-- name: CreateReadingHistory :one
INSERT INTO reading_histories (user_id, book_id, status, start_date, end_date)
VALUES ($1, $2, $3, $4, $5) RETURNING user_id, book_id, status, start_date, end_date, created_at, updated_at
`

type CreateReadingHistoryParams struct {
	UserID    int64         `json:"user_id"`
	BookID    int64         `json:"book_id"`
	Status    ReadingStatus `json:"status"`
	StartDate sql.NullTime  `json:"start_date"`
	EndDate   sql.NullTime  `json:"end_date"`
}

func (q *Queries) CreateReadingHistory(ctx context.Context, arg CreateReadingHistoryParams) (ReadingHistory, error) {
	row := q.db.QueryRowContext(ctx, createReadingHistory,
		arg.UserID,
		arg.BookID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i ReadingHistory
	err := row.Scan(
		&i.UserID,
		&i.BookID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReadingHistory = `-- name: DeleteReadingHistory :exec
DELETE
FROM reading_histories
WHERE user_id = $1
  AND book_id = $2
`

type DeleteReadingHistoryParams struct {
	UserID int64 `json:"user_id"`
	BookID int64 `json:"book_id"`
}

func (q *Queries) DeleteReadingHistory(ctx context.Context, arg DeleteReadingHistoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteReadingHistory, arg.UserID, arg.BookID)
	return err
}

const getReadingHistoryByUser = `-- name: GetReadingHistoryByUser :many
WITH genre_aggregation AS (SELECT bg.book_id,
                                  STRING_AGG(g.name, ', ') AS genres
                           FROM book_genres bg
                                    LEFT JOIN genres g ON bg.genre_name = g.name
                           GROUP BY bg.book_id)

SELECT b.id,
       b.title,
       ga.genres,
       b.description,
       b.cover_image_url,
       b.url,
       b.author_name,
       b.publisher_name,
       b.published_date,
       b.isbn,
       rh.status,
       rh.start_date,
       rh.end_date
FROM reading_histories rh
         LEFT JOIN books b ON b.id = rh.book_id
         LEFT JOIN genre_aggregation ga ON b.id = ga.book_id
WHERE rh.user_id = $1
ORDER BY rh.created_at LIMIT $2
OFFSET $3
`

type GetReadingHistoryByUserParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetReadingHistoryByUserRow struct {
	ID            sql.NullInt64  `json:"id"`
	Title         sql.NullString `json:"title"`
	Genres        []byte         `json:"genres"`
	Description   sql.NullString `json:"description"`
	CoverImageUrl sql.NullString `json:"cover_image_url"`
	Url           sql.NullString `json:"url"`
	AuthorName    sql.NullString `json:"author_name"`
	PublisherName sql.NullString `json:"publisher_name"`
	PublishedDate sql.NullTime   `json:"published_date"`
	Isbn          sql.NullString `json:"isbn"`
	Status        ReadingStatus  `json:"status"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
}

func (q *Queries) GetReadingHistoryByUser(ctx context.Context, arg GetReadingHistoryByUserParams) ([]GetReadingHistoryByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReadingHistoryByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReadingHistoryByUserRow{}
	for rows.Next() {
		var i GetReadingHistoryByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genres,
			&i.Description,
			&i.CoverImageUrl,
			&i.Url,
			&i.AuthorName,
			&i.PublisherName,
			&i.PublishedDate,
			&i.Isbn,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadingHistoryByUserAndBook = `-- name: GetReadingHistoryByUserAndBook :one
SELECT b.id,
       b.title,
       STRING_AGG(g.name, ', ') AS genres,
       b.description,
       b.cover_image_url,
       b.url,
       b.author_name,
       b.publisher_name,
       b.published_date,
       b.isbn,
       rh.status,
       rh.start_date,
       rh.end_date
FROM reading_histories rh
         LEFT JOIN books b ON b.id = rh.book_id
         LEFT JOIN book_genres bg on b.id = bg.book_id
         LEFT JOIN genres g on bg.genre_name = g.name
WHERE rh.user_id = $1
  AND rh.book_id = $2
GROUP BY b.id
ORDER BY rh.created_at
`

type GetReadingHistoryByUserAndBookParams struct {
	UserID int64 `json:"user_id"`
	BookID int64 `json:"book_id"`
}

type GetReadingHistoryByUserAndBookRow struct {
	ID            sql.NullInt64  `json:"id"`
	Title         sql.NullString `json:"title"`
	Genres        []byte         `json:"genres"`
	Description   sql.NullString `json:"description"`
	CoverImageUrl sql.NullString `json:"cover_image_url"`
	Url           sql.NullString `json:"url"`
	AuthorName    sql.NullString `json:"author_name"`
	PublisherName sql.NullString `json:"publisher_name"`
	PublishedDate sql.NullTime   `json:"published_date"`
	Isbn          sql.NullString `json:"isbn"`
	Status        ReadingStatus  `json:"status"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
}

func (q *Queries) GetReadingHistoryByUserAndBook(ctx context.Context, arg GetReadingHistoryByUserAndBookParams) (GetReadingHistoryByUserAndBookRow, error) {
	row := q.db.QueryRowContext(ctx, getReadingHistoryByUserAndBook, arg.UserID, arg.BookID)
	var i GetReadingHistoryByUserAndBookRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genres,
		&i.Description,
		&i.CoverImageUrl,
		&i.Url,
		&i.AuthorName,
		&i.PublisherName,
		&i.PublishedDate,
		&i.Isbn,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getReadingHistoryByUserAndStatus = `-- name: GetReadingHistoryByUserAndStatus :many
WITH genre_aggregation AS (SELECT bg.book_id,
                                  STRING_AGG(g.name, ', ') AS genres
                           FROM book_genres bg
                                    LEFT JOIN genres g ON bg.genre_name = g.name
                           GROUP BY bg.book_id)

SELECT b.id,
       b.title,
       ga.genres,
       b.description,
       b.cover_image_url,
       b.url,
       b.author_name,
       b.publisher_name,
       b.published_date,
       b.isbn,
       rh.status,
       rh.start_date,
       rh.end_date
FROM reading_histories rh
         LEFT JOIN books b ON b.id = rh.book_id
         LEFT JOIN genre_aggregation ga ON b.id = ga.book_id
WHERE rh.user_id = $1
  AND rh.status = $2
ORDER BY rh.created_at LIMIT $3
OFFSET $4
`

type GetReadingHistoryByUserAndStatusParams struct {
	UserID int64         `json:"user_id"`
	Status ReadingStatus `json:"status"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

type GetReadingHistoryByUserAndStatusRow struct {
	ID            sql.NullInt64  `json:"id"`
	Title         sql.NullString `json:"title"`
	Genres        []byte         `json:"genres"`
	Description   sql.NullString `json:"description"`
	CoverImageUrl sql.NullString `json:"cover_image_url"`
	Url           sql.NullString `json:"url"`
	AuthorName    sql.NullString `json:"author_name"`
	PublisherName sql.NullString `json:"publisher_name"`
	PublishedDate sql.NullTime   `json:"published_date"`
	Isbn          sql.NullString `json:"isbn"`
	Status        ReadingStatus  `json:"status"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
}

func (q *Queries) GetReadingHistoryByUserAndStatus(ctx context.Context, arg GetReadingHistoryByUserAndStatusParams) ([]GetReadingHistoryByUserAndStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getReadingHistoryByUserAndStatus,
		arg.UserID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReadingHistoryByUserAndStatusRow{}
	for rows.Next() {
		var i GetReadingHistoryByUserAndStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genres,
			&i.Description,
			&i.CoverImageUrl,
			&i.Url,
			&i.AuthorName,
			&i.PublisherName,
			&i.PublishedDate,
			&i.Isbn,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReadingHistory = `-- name: UpdateReadingHistory :one
UPDATE reading_histories
SET status     = $3,
    start_date = $4,
    end_date   = $5,
    updated_at = now()
WHERE user_id = $1
  AND book_id = $2 RETURNING user_id, book_id, status, start_date, end_date, created_at, updated_at
`

type UpdateReadingHistoryParams struct {
	UserID    int64         `json:"user_id"`
	BookID    int64         `json:"book_id"`
	Status    ReadingStatus `json:"status"`
	StartDate sql.NullTime  `json:"start_date"`
	EndDate   sql.NullTime  `json:"end_date"`
}

func (q *Queries) UpdateReadingHistory(ctx context.Context, arg UpdateReadingHistoryParams) (ReadingHistory, error) {
	row := q.db.QueryRowContext(ctx, updateReadingHistory,
		arg.UserID,
		arg.BookID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i ReadingHistory
	err := row.Scan(
		&i.UserID,
		&i.BookID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
