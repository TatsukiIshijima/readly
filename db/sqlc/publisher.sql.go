// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: publisher.sql

package db

import (
	"context"
	"database/sql"
)

const deletePublisher = `-- name: DeletePublisher :exec
DELETE
FROM publishers
WHERE id = $1
`

func (q *Queries) DeletePublisher(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePublisher, id)
	return err
}

const getAllPublishers = `-- name: GetAllPublishers :many
SELECT id, name, created_at, updated_at
FROM publishers
`

func (q *Queries) GetAllPublishers(ctx context.Context) ([]Publisher, error) {
	rows, err := q.db.QueryContext(ctx, getAllPublishers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Publisher
	for rows.Next() {
		var i Publisher
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublisherByName = `-- name: GetPublisherByName :one
SELECT id, name, created_at, updated_at
FROM publishers
WHERE name = $1
`

func (q *Queries) GetPublisherByName(ctx context.Context, name sql.NullString) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, getPublisherByName, name)
	var i Publisher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPublisher = `-- name: InsertPublisher :one
INSERT INTO publishers (name)
VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) InsertPublisher(ctx context.Context, name sql.NullString) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, insertPublisher, name)
	var i Publisher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPublishers = `-- name: ListPublishers :many
SELECT id, name, created_at, updated_at
FROM publishers LIMIT $1
OFFSET $2
`

type ListPublishersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublishers(ctx context.Context, arg ListPublishersParams) ([]Publisher, error) {
	rows, err := q.db.QueryContext(ctx, listPublishers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Publisher
	for rows.Next() {
		var i Publisher
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
