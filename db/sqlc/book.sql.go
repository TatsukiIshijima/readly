// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (title,
                   description,
                   cover_image_url,
                   url,
                   author_name,
                   publisher_name,
                   published_date,
                   isbn)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
`

type CreateBookParams struct {
	Title         sql.NullString `json:"title"`
	Description   sql.NullString `json:"description"`
	CoverImageUrl sql.NullString `json:"cover_image_url"`
	Url           sql.NullString `json:"url"`
	AuthorName    string         `json:"author_name"`
	PublisherName string         `json:"publisher_name"`
	PublishedDate sql.NullTime   `json:"published_date"`
	Isbn          sql.NullString `json:"isbn"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Description,
		arg.CoverImageUrl,
		arg.Url,
		arg.AuthorName,
		arg.PublisherName,
		arg.PublishedDate,
		arg.Isbn,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.Url,
		&i.AuthorName,
		&i.PublisherName,
		&i.PublishedDate,
		&i.Isbn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE
FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBookById = `-- name: GetBookById :one
SELECT id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
FROM books
WHERE id = $1
`

func (q *Queries) GetBookById(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.Url,
		&i.AuthorName,
		&i.PublisherName,
		&i.PublishedDate,
		&i.Isbn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooksByAuthorName = `-- name: GetBooksByAuthorName :many
SELECT id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
FROM books
WHERE author_name LIKE $1
`

func (q *Queries) GetBooksByAuthorName(ctx context.Context, authorName string) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthorName, authorName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverImageUrl,
			&i.Url,
			&i.AuthorName,
			&i.PublisherName,
			&i.PublishedDate,
			&i.Isbn,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByIsbn = `-- name: GetBooksByIsbn :many
SELECT id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
FROM books
WHERE isbn = $1
`

func (q *Queries) GetBooksByIsbn(ctx context.Context, isbn sql.NullString) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByIsbn, isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverImageUrl,
			&i.Url,
			&i.AuthorName,
			&i.PublisherName,
			&i.PublishedDate,
			&i.Isbn,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByTitle = `-- name: GetBooksByTitle :many
SELECT id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
FROM books
WHERE title LIKE $1
`

func (q *Queries) GetBooksByTitle(ctx context.Context, title sql.NullString) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverImageUrl,
			&i.Url,
			&i.AuthorName,
			&i.PublisherName,
			&i.PublishedDate,
			&i.Isbn,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET title           = $2,
    description     = $3,
    cover_image_url = $4,
    url             = $5,
    author_name     = $6,
    publisher_name  = $7,
    published_date  = $8,
    isbn            = $9,
    updated_at      = now()
WHERE id = $1 RETURNING id, title, description, cover_image_url, url, author_name, publisher_name, published_date, isbn, created_at, updated_at
`

type UpdateBookParams struct {
	ID            int64          `json:"id"`
	Title         sql.NullString `json:"title"`
	Description   sql.NullString `json:"description"`
	CoverImageUrl sql.NullString `json:"cover_image_url"`
	Url           sql.NullString `json:"url"`
	AuthorName    string         `json:"author_name"`
	PublisherName string         `json:"publisher_name"`
	PublishedDate sql.NullTime   `json:"published_date"`
	Isbn          sql.NullString `json:"isbn"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CoverImageUrl,
		arg.Url,
		arg.AuthorName,
		arg.PublisherName,
		arg.PublishedDate,
		arg.Isbn,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.Url,
		&i.AuthorName,
		&i.PublisherName,
		&i.PublishedDate,
		&i.Isbn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
