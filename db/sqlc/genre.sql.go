// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: genre.sql

package db

import (
	"context"
)

const deleteGenre = `-- name: DeleteGenre :exec
DELETE
FROM genres
WHERE name = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, name)
	return err
}

const getAllGenres = `-- name: GetAllGenres :many
SELECT name, created_at
FROM genres
`

func (q *Queries) GetAllGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, getAllGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenreByName = `-- name: GetGenreByName :one
SELECT name, created_at
FROM genres
WHERE name = $1
`

func (q *Queries) GetGenreByName(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenreByName, name)
	var i Genre
	err := row.Scan(&i.Name, &i.CreatedAt)
	return i, err
}

const insertGenre = `-- name: InsertGenre :one
INSERT INTO genres (name)
VALUES ($1) RETURNING name, created_at
`

func (q *Queries) InsertGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, insertGenre, name)
	var i Genre
	err := row.Scan(&i.Name, &i.CreatedAt)
	return i, err
}
