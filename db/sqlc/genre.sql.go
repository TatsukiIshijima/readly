// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: genre.sql

package db

import (
	"context"
)

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, id)
	return err
}

const getAllGenres = `-- name: GetAllGenres :many
SELECT id, name, created_at, updated_at FROM genres
`

func (q *Queries) GetAllGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, getAllGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenreByID = `-- name: GetGenreByID :one
SELECT id, name, created_at, updated_at FROM genres WHERE id = $1
`

func (q *Queries) GetGenreByID(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenreByID, id)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertGenre = `-- name: InsertGenre :exec
INSERT INTO genres (name) VALUES ($1)
`

func (q *Queries) InsertGenre(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertGenre, name)
	return err
}

const updateGenre = `-- name: UpdateGenre :exec
UPDATE genres SET name = $1 WHERE id = $2
`

type UpdateGenreParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) error {
	_, err := q.db.ExecContext(ctx, updateGenre, arg.Name, arg.ID)
	return err
}
